pipeline {
    agent any

    parameters {
        string(name: 'AWS_REGION', defaultValue: 'us-east-1', description: 'AWS Region')
        string(name: 'ECR_REPO_NAME', defaultValue: 'my-react-app', description: 'ECR Repository Name')
        string(name: 'ECS_CLUSTER', defaultValue: 'react-app-cluster', description: 'ECS Cluster Name')
        string(name: 'ECS_SERVICE', defaultValue: 'frontend-service', description: 'ECS Service Name')
        string(name: 'GIT_BRANCH', defaultValue: 'main', description: 'Branch to build')
    }

    environment {
        AWS_ACCOUNT_ID = sh(script: "aws sts get-caller-identity --query 'Account' --output text", returnStdout: true).trim()
        ECR_REPO = "${AWS_ACCOUNT_ID}.dkr.ecr.${params.AWS_REGION}.amazonaws.com/${params.ECR_REPO_NAME}"
        IMAGE_TAG = "${params.GIT_BRANCH}-${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: "${params.GIT_BRANCH}", url: 'https://github.com/VenkatAgilisium/react-app.git'
            }
        }

        stage('Login to AWS ECR') {
            steps {
                sh "aws ecr get-login-password --region ${params.AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}"
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                sh """
                docker build -t ${ECR_REPO}:${IMAGE_TAG} .
                docker push ${ECR_REPO}:${IMAGE_TAG}
                """
            }
        }

        stage('Deploy to ECS') {
            steps {
                sh """
                aws ecs update-service --cluster ${params.ECS_CLUSTER} --service ${params.ECS_SERVICE} \
                --force-new-deployment --region ${params.AWS_REGION}
                """
            }
        }
    }
}
